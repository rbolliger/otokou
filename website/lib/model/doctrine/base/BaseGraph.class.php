<?php

/**
 * BaseGraph
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $vehicle_id
 * @property string $vehicle_display
 * @property integer $user_id
 * @property integer $category_id
 * @property string $category_display
 * @property date $date_from
 * @property date $date_to
 * @property double $kilometers_from
 * @property double $kilometers_to
 * @property string $range_type
 * @property string $sha
 * @property string $graph_name
 * @property Vehicle $Vehicle
 * @property Category $Category
 * @property sfGuardUser $User
 * 
 * @method integer     getId()               Returns the current record's "id" value
 * @method integer     getVehicleId()        Returns the current record's "vehicle_id" value
 * @method string      getVehicleDisplay()   Returns the current record's "vehicle_display" value
 * @method integer     getUserId()           Returns the current record's "user_id" value
 * @method integer     getCategoryId()       Returns the current record's "category_id" value
 * @method string      getCategoryDisplay()  Returns the current record's "category_display" value
 * @method date        getDateFrom()         Returns the current record's "date_from" value
 * @method date        getDateTo()           Returns the current record's "date_to" value
 * @method double      getKilometersFrom()   Returns the current record's "kilometers_from" value
 * @method double      getKilometersTo()     Returns the current record's "kilometers_to" value
 * @method string      getRangeType()        Returns the current record's "range_type" value
 * @method string      getSha()              Returns the current record's "sha" value
 * @method string      getGraphName()        Returns the current record's "graph_name" value
 * @method Vehicle     getVehicle()          Returns the current record's "Vehicle" value
 * @method Category    getCategory()         Returns the current record's "Category" value
 * @method sfGuardUser getUser()             Returns the current record's "User" value
 * @method Graph       setId()               Sets the current record's "id" value
 * @method Graph       setVehicleId()        Sets the current record's "vehicle_id" value
 * @method Graph       setVehicleDisplay()   Sets the current record's "vehicle_display" value
 * @method Graph       setUserId()           Sets the current record's "user_id" value
 * @method Graph       setCategoryId()       Sets the current record's "category_id" value
 * @method Graph       setCategoryDisplay()  Sets the current record's "category_display" value
 * @method Graph       setDateFrom()         Sets the current record's "date_from" value
 * @method Graph       setDateTo()           Sets the current record's "date_to" value
 * @method Graph       setKilometersFrom()   Sets the current record's "kilometers_from" value
 * @method Graph       setKilometersTo()     Sets the current record's "kilometers_to" value
 * @method Graph       setRangeType()        Sets the current record's "range_type" value
 * @method Graph       setSha()              Sets the current record's "sha" value
 * @method Graph       setGraphName()        Sets the current record's "graph_name" value
 * @method Graph       setVehicle()          Sets the current record's "Vehicle" value
 * @method Graph       setCategory()         Sets the current record's "Category" value
 * @method Graph       setUser()             Sets the current record's "User" value
 * 
 * @package    otokou
 * @subpackage model
 * @author     Raffaele Bolliger
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseGraph extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('graph');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('vehicle_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('vehicle_display', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('category_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('category_display', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('date_from', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('date_to', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('kilometers_from', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('kilometers_to', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('range_type', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 20,
             ));
        $this->hasColumn('sha', 'string', 64, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 64,
             ));
        $this->hasColumn('graph_name', 'string', 20, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 20,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Vehicle', array(
             'local' => 'vehicle_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('Category', array(
             'local' => 'category_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $timestampable0 = new Doctrine_Template_Timestampable(array(
             ));
        $this->actAs($timestampable0);
    }
}