<?php

/**
 * BaseChart
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $vehicle_display
 * @property integer $user_id
 * @property string $category_display
 * @property date $date_from
 * @property date $date_to
 * @property double $kilometers_from
 * @property double $kilometers_to
 * @property string $range_type
 * @property string $format
 * @property string $chart_name
 * @property Doctrine_Collection $Vehicles
 * @property Doctrine_Collection $Categories
 * @property sfGuardUser $User
 * @property Doctrine_Collection $ChartVehicles
 * 
 * @method integer             getId()               Returns the current record's "id" value
 * @method string              getVehicleDisplay()   Returns the current record's "vehicle_display" value
 * @method integer             getUserId()           Returns the current record's "user_id" value
 * @method string              getCategoryDisplay()  Returns the current record's "category_display" value
 * @method date                getDateFrom()         Returns the current record's "date_from" value
 * @method date                getDateTo()           Returns the current record's "date_to" value
 * @method double              getKilometersFrom()   Returns the current record's "kilometers_from" value
 * @method double              getKilometersTo()     Returns the current record's "kilometers_to" value
 * @method string              getRangeType()        Returns the current record's "range_type" value
 * @method string              getFormat()           Returns the current record's "format" value
 * @method string              getChartName()        Returns the current record's "chart_name" value
 * @method Doctrine_Collection getVehicles()         Returns the current record's "Vehicles" collection
 * @method Doctrine_Collection getCategories()       Returns the current record's "Categories" collection
 * @method sfGuardUser         getUser()             Returns the current record's "User" value
 * @method Doctrine_Collection getChartVehicles()    Returns the current record's "ChartVehicles" collection
 * @method Chart               setId()               Sets the current record's "id" value
 * @method Chart               setVehicleDisplay()   Sets the current record's "vehicle_display" value
 * @method Chart               setUserId()           Sets the current record's "user_id" value
 * @method Chart               setCategoryDisplay()  Sets the current record's "category_display" value
 * @method Chart               setDateFrom()         Sets the current record's "date_from" value
 * @method Chart               setDateTo()           Sets the current record's "date_to" value
 * @method Chart               setKilometersFrom()   Sets the current record's "kilometers_from" value
 * @method Chart               setKilometersTo()     Sets the current record's "kilometers_to" value
 * @method Chart               setRangeType()        Sets the current record's "range_type" value
 * @method Chart               setFormat()           Sets the current record's "format" value
 * @method Chart               setChartName()        Sets the current record's "chart_name" value
 * @method Chart               setVehicles()         Sets the current record's "Vehicles" collection
 * @method Chart               setCategories()       Sets the current record's "Categories" collection
 * @method Chart               setUser()             Sets the current record's "User" value
 * @method Chart               setChartVehicles()    Sets the current record's "ChartVehicles" collection
 * 
 * @package    otokou
 * @subpackage model
 * @author     Raffaele Bolliger
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseChart extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('chart');
        $this->hasColumn('id', 'integer', null, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             ));
        $this->hasColumn('vehicle_display', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('category_display', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('date_from', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('date_to', 'date', null, array(
             'type' => 'date',
             ));
        $this->hasColumn('kilometers_from', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('kilometers_to', 'double', null, array(
             'type' => 'double',
             ));
        $this->hasColumn('range_type', 'string', 20, array(
             'type' => 'string',
             'length' => 20,
             ));
        $this->hasColumn('format', 'string', 5, array(
             'type' => 'string',
             'length' => 5,
             ));
        $this->hasColumn('chart_name', 'string', 40, array(
             'type' => 'string',
             'length' => 40,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasMany('Vehicle as Vehicles', array(
             'refClass' => 'ChartVehicle',
             'local' => 'chart_id',
             'foreign' => 'vehicle_id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('Category as Categories', array(
             'refClass' => 'ChartCategory',
             'local' => 'chart_id',
             'foreign' => 'category_id',
             'onDelete' => 'CASCADE'));

        $this->hasOne('sfGuardUser as User', array(
             'local' => 'user_id',
             'foreign' => 'id',
             'onDelete' => 'CASCADE'));

        $this->hasMany('ChartVehicle as ChartVehicles', array(
             'local' => 'id',
             'foreign' => 'chart_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'name' => 'sha',
             'unique' => true,
             'canUpdate' => false,
             'indexName' => 'hashable',
             'type' => 'string',
             'length' => 40,
             'fields' => 
             array(
              0 => 'vehicle_display',
              1 => 'user_id',
              2 => 'category_display',
              3 => 'date_from',
              4 => 'date_to',
              5 => 'kilometers_from',
              6 => 'kilometers_to',
              7 => 'range_type',
              8 => 'format',
              9 => 'chart_name',
              10 => 'Vehicles',
              11 => 'Categories',
             ),
             ));
        $this->actAs($timestampable0);
        $this->actAs($sluggable0);
    }
}