<?php

/**
 * VehicleTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class VehicleTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object VehicleTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Vehicle');
    }

    public function getVehiclesByUserIdQuery($id) {
        $q = $this->createQuery('v')->select('v.*')
                ->andWhere('v.user_id = ?', $id);

        return $q;
    }

    public function findByUsername($username) {

        $q = $this->createQuery('v');

        $q = $this->addUsernameQuery($q, $username);
        $q = $this->addSortByName($q);
        $q = $this->addIsArchivedQuery($q, false);

        return $q->execute();
    }

    public function countActiveByUserId($user_id) {

        $q = $this->createQuery('v');

        $q = $this->addUserIdQuery($q, $user_id);
        $q = $this->addIsArchivedQuery($q, false);

        return $q->count();
    }

    public function getActiveVehiclesQuery($username) {

        $q = $this->createQuery('v')
                ->select('v.*');

        $q = $this->addUsernameQuery($q, $username);
        $q = $this->addIsArchivedQuery($q, false);
        $q = $this->addSortByName($q);

        return $q;
    }

    protected function addUsernameQuery(Doctrine_Query $q, $username) {

        $root = $q->getRootAlias();

        $q->leftJoin($root . '.User u')
                ->andWhere('u.username = ?', $username);

        return $q;
    }

    protected function addUserIdQuery(Doctrine_Query $q, $id) {

        $root = $q->getRootAlias();

        $q->leftJoin($root . '.User u')
                ->andWhere('u.id = ?', $id);

        return $q;
    }

    protected function addIsArchivedQuery(Doctrine_Query $q, $isArchived = false) {

        $root = $q->getRootAlias();

        $q->andWhere($root . '.is_archived = ?', $isArchived);

        return $q;
    }

    protected function addSortByName(Doctrine_Query $q) {

        $root = $q->getRootAlias();

        return $q->orderBy($root . '.name ASC, ' . $root . '.created_at DESC');
    }

    public function findArchivedByUserId($id = null) {

        if (!$id) {
            throw new sfDoctrineException('id must be provided');
        }

        $q = $this->createQuery('v')
                ->select('v.*');

        $q = $this->addUserIdQuery($q, $id);
        $q = $this->addIsArchivedQuery($q, false);

        return $q->execute();
    }

}