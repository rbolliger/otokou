<?php

/**
 * VehicleTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class VehicleTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object VehicleTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Vehicle');
    }

    public function getVehiclesByUserIdQuery($id) {
        $q = $this->createQuery('v')->select('v.*')
                        ->andWhere('v.user_id = ?', $id);

        return $q;
    }

    public function findByUserIdAndVehicleId($user_id = null, $vehicle_id = array()) {

        if (!$user_id) {
            throw new Doctrine_Table_Exception('You must specify a "user_id"');
        }

        $q = $this->createQuery('v')->andWhere('v.user_id = ?', $user_id);

        if ($vehicle_id) {
            $q->andWhereIn('v.id', $vehicle_id);
        }

        return $q->execute();
    }

    public function findByUsernameAndSortByArchived($username) {

        $q = $this->createQuery('v');

        $q = $this->addSortByArchivedAndCreatedAt($q);
        $q = $this->addUsernameQuery($q, $username);

        return $q->execute();
    }

    public function findWithReports($params) {

        $q = $this->createQuery('v')
                        ->select('v.*');

        $q = self::getInstance()->addWithSingleReportQuery($q);

        $q = $this->addSortByArchivedAndCreatedAt($q);

        $q = $this->addUsernameQuery($q, $params['username']);

        return $q->execute();
    }

    public function findBySlugWithReports($params) {

        $q = $this->createQuery('v')
                        ->select('v.*');

        $q = self::getInstance()->addWithSingleReportQuery($q);

        $q = $this->addSortByArchivedAndCreatedAt($q);

        $q = $this->addUsernameQuery($q, $params['username']);

        $q->andWhere('v.slug = ?',$params['slug']);

        return $q->execute();
    }

    protected function addUsernameQuery(Doctrine_Query $q, $username) {

        $root = $q->getRootAlias();

        $q->leftJoin($root . '.User u')
                ->andWhere('u.username = ?', $username);

        return $q;
    }

    protected function addSortByArchivedAndCreatedAt(Doctrine_Query $q) {

        $root = $q->getRootAlias();

        return $q->orderBy($root . '.is_archived DESC, ' . $root . '.created_at DESC');
    }

    protected function addWithSingleReportQuery(Doctrine_Query $q) {

        $root = $q->getRootAlias();

        $q->innerJoin($root . '.Reports r')
                ->addWhere('r.num_vehicles = 1');

        return $q;
    }
    
    public function findArchivedByUserId($id = null) {
        
        if (!$id) {
            throw new sfDoctrineException('id must be provided');
        }
        
        return $this->createQuery('v')
                ->addWhere('v.user_id = ?', $id)
                ->andWhere('v.is_archived = ?', false)
                ->leftJoin('v.User u')
                ->execute();
        
    }
    

}